import livros.Livro;
import livros.StatusLivro;
import usuario.Leitor;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    // Scanner para entrada do usu√°rio
    private static final Scanner scanner = new Scanner(System.in);
    // Lista de livros dispon√≠veis no sistema
    private static final List<Livro> livros = new ArrayList<>();
    // Objeto Leitor representando o usu√°rio do sistema
    private static Leitor leitor;

    public static void main(String[] args) {
        cadastrarLeitor(); // Cadastra os dados do usuario
        carregarLivrosIniciais(); // Adiciona alguns livros de exemplo

        boolean continuar = true;
        while (continuar) {
            exibirMenu(); // Exibe o menu principal
            int opcao = lerOpcaoUsuario(); // L√™ a op√ß√£o escolhida

            // Estrutura de decis√£o para processar a op√ß√£o do usuario
            switch (opcao) {
                case 1 -> {
                    listarLivros();
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine(); // Aguarda o usuario pressionar Enter
                }
                case 2 -> {
                    cadastrarLivro();
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine();
                }
                case 3 -> {
                    visualizarDadosLeitor();
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine();
                }
                case 4 -> {
                    emprestarLivro();
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine();
                }
                case 5 -> {
                    removerLivro();
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine();
                }
                case 6 -> {
                    devolverLivro();  // Op√ß√£o para devolver livro
                    System.out.println("\nPressione Enter para continuar...");
                    scanner.nextLine();
                }
                case 7 -> {
                    System.out.println("\nüëã Saindo do sistema... Obrigado por usar a biblioteca!");
                    continuar = false;
                }
                default -> System.out.println("\n‚ö† Op√ß√£o inv√°lida! Escolha um n√∫mero entre 1 e 7.");
            }
        }
        scanner.close(); // Fecha o scanner ao sair do programa
    }

    /**
     * Solicita os dados do usu√°rio e cria um novo objeto Leitor.
     */
    private static void cadastrarLeitor() {
        System.out.println("\n---------------------------");
        System.out.println("     Cadastro de Leitor ");
        System.out.println("---------------------------");
        System.out.print("Digite seu nome: ");
        String nome = scanner.nextLine();
        System.out.print("Digite seu CPF: ");
        String CPF = scanner.nextLine();
        leitor = new Leitor(nome, CPF);
        System.out.println("‚úÖ Cadastro realizado com sucesso!");
    }

    /**
     * Adiciona livros pr√©-definidos √† lista.
     */
    private static void carregarLivrosIniciais() {
        livros.add(new Livro("A Cabe√ßa do Santo", "Socorro Acioli", StatusLivro.DISPONIVEL));
        livros.add(new Livro("E n√£o sobrou nenhum", "Agatha Christie", StatusLivro.DISPONIVEL));
        livros.add(new Livro("O Retrato de Dorian Gray", "Oscar Wilde", StatusLivro.DISPONIVEL));
        livros.add(new Livro("A Metamorfose", "Franz Kafka", StatusLivro.EMPRESTADO));
    }

    /**
     * Exibe o menu principal do sistema.
     */
    private static void exibirMenu() {
        System.out.println("\n-------------------------------------------");
        System.out.println("  SISTEMA DE GERENCIAMENTO DE BIBLIOTECA");
        System.out.println("-------------------------------------------");
        System.out.println("1Ô∏è-  Visualizar Livros");
        System.out.println("2Ô∏è-  Cadastrar Livro");
        System.out.println("3Ô∏è-  Dados do Leitor");
        System.out.println("4Ô∏è-  Empr√©stimo de Livro");
        System.out.println("5Ô∏è-  Remover Livro");
        System.out.println("6Ô∏è-  Devolu√ß√£o de Livro");  // Nova op√ß√£o
        System.out.println("7Ô∏è-  Sair");
        System.out.println("-------------------------------------------");
        System.out.print("üëâ Escolha uma op√ß√£o: ");
    }

    /**
     * L√™ a op√ß√£o digitada pelo usu√°rio, garantindo que seja um n√∫mero v√°lido.
     * @return n√∫mero da op√ß√£o escolhida
     */
    private static int lerOpcaoUsuario() {
        while (true) {
            if (scanner.hasNextInt()) {
                int opcao = scanner.nextInt();
                scanner.nextLine(); // Limpa o buffer
                return opcao;
            } else {
                System.out.print("‚ö† Entrada inv√°lida! Digite um n√∫mero: ");
                scanner.next();
            }
        }
    }

    /**
     * Exibe a lista de livros cadastrados no sistema.
     */
    private static void listarLivros() {
        if (livros.isEmpty()) {
            System.out.println("\n Nenhum livro cadastrado ainda.");
            return;
        }

        System.out.println("\n-------------------");
        System.out.println(" Lista de Livros:");
        System.out.println("-------------------");
        System.out.printf("%-5s %-40s %-30s %-15s%n", "ID", "T√≠tulo", "Autor", "Status");
        System.out.println("---------------------------------------------------------------");
        for (int i = 0; i < livros.size(); i++) {
            System.out.printf("%-5d %-40s %-30s %-15s%n", i + 1, livros.get(i).getTitulo(), livros.get(i).getAutor(), livros.get(i).getStatus());
        }
    }

    /**
     * Permite ao usu√°rio cadastrar um novo livro na biblioteca.
     */
    private static void cadastrarLivro() {
        System.out.print("\n Digite o t√≠tulo do livro: ");
        String titulo = scanner.nextLine();
        System.out.print(" Digite o autor do livro: ");
        String autor = scanner.nextLine();
        livros.add(new Livro(titulo, autor, StatusLivro.DISPONIVEL));
        System.out.println("\n‚úÖ Livro cadastrado com sucesso!");
    }

    /**
     * Exibe as informa√ß√µes do leitor cadastrado no sistema.
     */
    private static void visualizarDadosLeitor() {
        System.out.println("\nüìñ Dados do Leitor:");
        leitor.exibirInfoUsuario();
    }

    /**
     * Realiza o empr√©stimo de um livro, alterando seu status se dispon√≠vel.
     */
    /**
     * Realiza o empr√©stimo de um livro, alterando seu status se dispon√≠vel.
     */
    private static void emprestarLivro() {
        if (livros.isEmpty()) {
            System.out.println("\nN√£o h√° livros dispon√≠veis para empr√©stimo.");
            return;
        }

        System.out.println("\n----------------------------");
        System.out.println("   Livros Dispon√≠veis:");
        System.out.println("----------------------------");
        System.out.printf("%-5s %-40s %-30s %-15s%n", "ID", "T√≠tulo", "Autor", "Status");
        System.out.println("---------------------------------------------------------------");

        for (int i = 0; i < livros.size(); i++) {
            Livro livro = livros.get(i);
            if (livro.getStatus() == StatusLivro.DISPONIVEL) {
                System.out.printf("%-5d %-40s %-30s %-15s%n", i + 1, livro.getTitulo(), livro.getAutor(), "Dispon√≠vel");
            }
        }

        System.out.println("---------------------------------------------------------------");

        System.out.print("\nüëâ Digite o n√∫mero do livro que deseja pegar emprestado ou 0 para voltar: ");
        int escolhaLivro = lerOpcaoUsuario();

        if (escolhaLivro > 0 && escolhaLivro <= livros.size()) {
            Livro livroSelecionado = livros.get(escolhaLivro - 1);
            if (livroSelecionado.getStatus() == StatusLivro.DISPONIVEL) {
                livroSelecionado.emprestarLivro();
                System.out.println("\n‚úÖ Livro emprestado com sucesso!");
            } else {
                System.out.println("\n‚ö† Este livro j√° est√° emprestado.");
            }
        } else if (escolhaLivro != 0) {
            System.out.println("\n‚ö† Op√ß√£o inv√°lida! Digite novamente.");
        }
    }


    /**
     * Permite ao usu√°rio remover um livro da biblioteca.
     */
    private static void removerLivro() {
        if (livros.isEmpty()) {
            System.out.println("\nüì≠ Nenhum livro cadastrado ainda para remover.");
            return;
        }

        System.out.println("\n Livros Dispon√≠veis:");
        for (int i = 0; i < livros.size(); i++) {
            System.out.println((i + 1) + ". " + livros.get(i).getTitulo());
        }

        System.out.print("\nüóë Digite o n√∫mero do livro que deseja remover ou 0 para voltar: ");
        int escolha = lerOpcaoUsuario();

        if (escolha > 0 && escolha <= livros.size()) {
            livros.remove(escolha - 1);
            System.out.println("\n‚úÖ Livro removido com sucesso!");
        } else if (escolha != 0) {
            System.out.println("\n‚ö† Op√ß√£o inv√°lida! Digite novamente.");
        }
    }

    /**
     * Permite ao usu√°rio devolver um livro, alterando seu status de emprestado para dispon√≠vel.
     */
    private static void devolverLivro() {
        if (livros.isEmpty()) {
            System.out.println("\nN√£o h√° livros cadastrados no sistema.");
            return;
        }

        System.out.println("\n----------------------------");
        System.out.println("   Livros Emprestados:");
        System.out.println("----------------------------");
        System.out.printf("%-5s %-40s %-30s %-15s%n", "ID", "T√≠tulo", "Autor", "Status");
        System.out.println("---------------------------------------------------------------");

        boolean livrosEmprestados = false;
        for (int i = 0; i < livros.size(); i++) {
            Livro livro = livros.get(i);
            if (livro.getStatus() == StatusLivro.EMPRESTADO) {
                System.out.printf("%-5d %-40s %-30s %-15s%n", i + 1, livro.getTitulo(), livro.getAutor(), "Emprestado");
                livrosEmprestados = true;
            }
        }

        if (!livrosEmprestados) {
            System.out.println("\nN√£o h√° livros emprestados no momento.");
            return;
        }

        System.out.println("---------------------------------------------------------------");

        System.out.print("\nüëâ Digite o n√∫mero do livro que deseja devolver ou 0 para voltar: ");
        int escolhaLivro = lerOpcaoUsuario();

        if (escolhaLivro > 0 && escolhaLivro <= livros.size()) {
            Livro livroSelecionado = livros.get(escolhaLivro - 1);
            if (livroSelecionado.getStatus() == StatusLivro.EMPRESTADO) {
                livroSelecionado.setStatus(StatusLivro.DISPONIVEL);
                System.out.println("\n‚úÖ Livro devolvido com sucesso!");
            } else {
                System.out.println("\n‚ö† Este livro n√£o est√° emprestado.");
            }
        } else if (escolhaLivro != 0) {
            System.out.println("\n‚ö† Op√ß√£o inv√°lida! Digite novamente.");
        }
    }
}
